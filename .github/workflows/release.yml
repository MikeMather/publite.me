name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump (patch, minor, major)'
        required: true
        default: 'patch'
      custom_version:
        description: 'Custom version (leave empty to auto-calculate based on version_type)'
        required: false
        default: ''

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Calculate new version number
      - name: Calculate version
        id: calculate_version
        run: |
          # Get latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${LATEST_TAG#v}
          echo "Current version: $CURRENT_VERSION"

          # Use custom version if provided, otherwise calculate
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            # Split the version into components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

            # Calculate new version based on version_type
            if [[ "${{ github.event.inputs.version_type }}" == "major" ]]; then
              NEW_VERSION="$((MAJOR + 1)).0.0"
            elif [[ "${{ github.event.inputs.version_type }}" == "minor" ]]; then
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            else
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            fi
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      # Build Docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            mikemather/publite.me:latest
            mikemather/publite.me:${{ env.NEW_VERSION }}

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configurationJson: |
            {
              "categories": [
                {
                  "title": "## üöÄ Features",
                  "labels": ["feature"]
                },
                {
                  "title": "## üêõ Fixes",
                  "labels": ["fix"]
                },
                {
                  "title": "## üß™ Tests",
                  "labels": ["test"]
                },
                {
                  "title": "## üí¨ Other",
                  "labels": []
                }
              ]
            }
          outputFile: "CHANGELOG.md"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ env.NEW_VERSION }}
          body_path: CHANGELOG.md
          tag_name: v${{ env.NEW_VERSION }}
          files: |
            dist/**/*.zip
            LICENSE
          token: ${{ secrets.GITHUB_TOKEN }}
